<title></title>
<date>October 31, 2018</date>
Let's preface this by saying that every single programmer has felt inadequate at one point or another.
Perhaps you wiped out an entire production database of customer information. Or your poorly written
query racked up several hundred days of CPU time on a cluster.

More likely, however, your error was more reconicilable. Something like broken functional tests or
simple typos. Something that can be captured in a single PR comment that points out something so 
obviously incorrect you can help but momentarily assume the fetal position beneath your desk amongst 
the warm blow of your dev box's fan.

I'm new to this game, but I'm fairly comfortable claiming that career stage is irrelevant.  There's 
simply too much to learn and, when you spend 8+ hours per day programming, too much time to not make 
at least a few mistakes.  I myself make mistakes every single day. In fact, most of my day is spent
figuring out how to fix the mistakes I made the previous day with one caveat.  I make a concious 
effort to improve and eliminate: improve on the previous mistakes and eliminate them in the future.

1. Keep a catalog of the annoying little problems you encounter.
Sometimes it takes a couple hours (or, too frequently, half a day) to resolve some bizarre kink
in your development process or environment.  Our development environments are complicated ecosystems
of applications, packages, configurations, etc. all which come with their own everchanging flavors 
and versions.  Inevitably, your little world will mysteriously collapse leaving behind no more to 
decypher the cause than a cryptic Rosetta Stone of error message. 
    More often than not, it's some consequence of expected computing behaviors combining
unexpectedly. When you finally figure out the fix, catalog it before continuing with the original 
problem. And do so with keywords.  If you work on the same thing every day, there's a good chance 
you are going to encounter this problem again.  And considering the problem was not totally relevant 
to the original problem, you likely did not internalize the solution. You fixed it and plowed 
straight ahead.
    This has the added benefit of being a super hero when your teammate is stranded helplessly
with the same problem.

2. Keep a catalog of the annoying little processes you encounter.
In an agile-driven industry, there is an overarching lack of documentation. In the sense that we 
don't spend hours perfecting a formal specification only to have product requirements redefined
before the spec is even finished, this is a good thing. However, the stripping of formal documentation
has taken with it documentation altogether.  

the demand for more productive development cycles have encouraged some developers to abandon 
documentation altogether. This means many fundamental processes go unnoted and are comitted to
the team brain as tacit knowledge. On my current team, our product has slowly undergone many 
transformations and rebrandings. There are artifacts from every 

The tiny nuances of our development environment bite me in the ass everytime I'm ready to make

3. Reach out before you burn out.
As a software developer, you likely have teammates working on the same product with the same 
development environment as you. Don't be afraid to ask for quick help/opinion on the little daily 
nuances and struggles. If thrity seconds of you're colleague's time can save you thrity minutes
of frustration, it's a hardly a noble sacrifice.

